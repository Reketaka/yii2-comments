<?php

namespace reketaka\comments\models;

use app\common\UserWeb;
use Yii;
use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use reketaka\comments\Module;
use yii\helpers\StringHelper;

/**
 * Class Comments
 * @package reketaka\comments
 * @property $id
 * @property $class_name
 * @property $identify_key
 * @property $parent
 * @property $content
 * @property $active
 * @property $date_create
 * @property $date_update
 * @property $user_id
 * @property $email
 * @property $name
 */

class Comments extends ActiveRecord{

    const SCENARIO_FORM_GUEST = 'addCommentFromGuest';
    const SCENARIO_FORM_USER = 'addCommentFromUser';

    static $errorKeyName = "commentsErrorKey";

    var $primaryKey = 'id';

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['date_create', 'date_update'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['date_update'],
                ],
                // если вместо метки времени UNIX используется datetime:
                'value' => Yii::$app->formatter->asDate('now', Yii::$app->params[Yii::$app->getModule('comments')->dateControlSaveKey][\kartik\datecontrol\Module::FORMAT_DATETIME]),
            ]
        ];
    }

    public static function tableName()
    {
        return '{{%comments}}';
    }

    public function scenarios()
    {
        return [
            self::SCENARIO_FORM_GUEST=>['email', 'name', 'content', 'class_name', 'identify_key'],
            self::SCENARIO_FORM_USER=>['content', 'class_name', 'identify_key']
        ];
    }

    public function rules()
    {
        return [
            [['class_name', 'identify_key'], 'required'],
            [['email'], 'email', 'on' => self::SCENARIO_FORM_GUEST],
            [['name', 'email'], 'required', 'on'=>self::SCENARIO_FORM_GUEST],
            [['name'], 'string', 'max'=>'250', 'on'=>self::SCENARIO_FORM_GUEST],
            [['parent'], 'default', 'value' => 0],
            [['parent'], 'integer'],
            [['content'], 'required'],
            [['active'], 'setActiveStatus']
        ];
    }

    public function attributeLabels()
    {
        return [
            'email'=>Module::t('base', 'your_email'),
            'name'=>Module::t('base', 'your_name'),
            'content'=>Module::t('base', 'you_message')
        ];
    }

    /**
     * Выставляет статус активность комментария
     * @param $attribute
     * @param $params
     * @return bool
     */
    public function setActiveStatus($attribute, $params){
        /**
         * @var $module \reketaka\comments\Module
         */
        $module = Yii::$app->getModule('comments');

        if($this->scenario == self::SCENARIO_FORM_GUEST){
            $this->active = $module->isGuestActive;
            return true;
        }

        $this->active = $module->isUserActive;
        return true;
    }

    /**
     * Возвращает модель Module->identifyUserClass если user_id !is_null($this->user_id)
     * если is_null($this->user_id) значит комметарий оставил пользователей не зарегестрированный
     * @return \yii\db\ActiveQuery|null
     * @throws InvalidConfigException
     */
    public function getUser(){
        if(is_null($this->user_id)){
            return null;
        }

        $module = Yii::$app->getModule('comments');

        try {
            $userClass = $module->identifyUserClass;
            $userClass = $userClass::className();
        }catch(\Exception $e){
            throw new InvalidConfigException(Module::t('errors', 'invalid_user_class'));
        }

        return $this->hasOne($userClass, ['id' => 'user_id']);
    }

    public function afterValidate()
    {
        if(is_null($this->user_id) && !Yii::$app->user->isGuest && $this->scenario == self::SCENARIO_FORM_USER){
            $this->user_id = Yii::$app->user->id;
        }

        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $module = Yii::$app->getModule('comments');

        if($insert && $module->increaseCounters){
            $this->increaseCountComment();
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function afterDelete()
    {
        $module = Yii::$app->getModule('comments');

        if($module->increaseCounters){
            $this->decreaseCountComment();
        }

        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

    public static function findsByModel($model){
        $r = self::find()
            ->where([
                'class_name'=>$model::className(),
                'identify_key'=>$model->getPrimaryKey()
            ])
            ->orderBy(['date_create'=>SORT_DESC])
            ->limit(20)
            ->all();

        return $r;
    }

    /**
     * Возвращает не законченный ActiveRecord для указанной модели
     * @param $model
     */
    public static function queryModel($model){
        $r = self::find()
            ->where([
                'class_name'=>$model::className(),
                'identify_key'=>$model->getPrimaryKey()
            ])
            ->orderBy(['date_create'=>SORT_DESC]);

        return $r;
    }

    public function decreaseCountComment(){
        try {
            /**
             * @var $model ActiveRecord
             * @var $behavior Behavior
             */
            $model = $this->class_name::findOne($this->identify_key);

            if(!($behavior = $model->getBehavior('comments'))){
                throw new InvalidConfigException(Module::t('errors', 'model_not_have_behavior'));
            }

            if($behavior->attributeNameCountComments === FALSE){
                return false;
            }

            $model->{$behavior->attributeNameCountComments} = $model->{$behavior->attributeNameCountComments}-1>=0?$model->{$behavior->attributeNameCountComments}-1:0;
            $model->save();
            return true;

        }catch(\Error $e){
            Yii::error(Module::t('errors', 'not_find_child_model'), __METHOD__);
        }
    }

    /**
     * Увеличиваем счетик количества комментариев в дочерних моделях
     * если включено в нстройках
     */
    public function increaseCountComment(){
        try {
            /**
             * @var $model ActiveRecord
             * @var $behavior Behavior
             */
            $model = $this->class_name::findOne($this->identify_key);

            if(!($behavior = $model->getBehavior('comments'))){
                throw new InvalidConfigException(Module::t('errors', 'model_not_have_behavior'));
            }

            if($behavior->attributeNameCountComments === FALSE){
                return false;
            }

            $model->updateCounters([$behavior->attributeNameCountComments=>1]);
            return true;

        }catch(\Error $e){
            Yii::error(Module::t('errors', 'not_find_child_model'), __METHOD__);
        }

    }

}